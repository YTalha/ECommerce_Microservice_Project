---
version: '4'
services:
  ## MySQL Docker Compose Config
  mysql-order:
    container_name: mysql-order
    image: mysql:8.3.0
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    volumes:
      - ./mysql-order:/var/lib/mysql
    expose:
      - "3306"
    ports:
      - "3306:3306"
    restart: unless-stopped

  mysql-inventory:
    container_name: mysql-inventory
    image: mysql:8.3.0
    environment:
      MYSQL_ROOT_PASSWORD: mysql
    volumes:
      - ./mysql-inventory:/var/lib/mysql
    ports:
      - "3316:3306"
    restart: unless-stopped

  ## Mongo Docker Compose Config
  mongo:
    container_name: mongo
    image: mongo:7.0.5
    restart: unless-stopped
    ports:
      - "27017:27017"
    expose:
      - "27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: product-service
    volumes:
      - ./data:/data/db

  ## Keycloak Config with Mysql database
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:8
    volumes:
      - ./volume-data/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:24.0.1
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: keycloak-mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8181:8080"
    volumes:
      - ./docker/keycloak/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  ## Api-Gateway Service Docker Compose Config
  api-gateway:
    image: yusuftalhakaya/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: yusuftalhakaya/product-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mongo
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: yusuftalhakaya/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/order_service
    depends_on:
      - mysql-order
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: yusuftalhakaya/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:3316/inventory_service
    depends_on:
      - mysql-inventory
      - api-gateway